# Copyright (c) 2010 Aldo Cortesi
# Copyright (c) 2010, 2014 dequis
# Copyright (c) 2012 Randall Ma
# Copyright (c) 2012-2014 Tycho Andersen
# Copyright (c) 2012 Craig Barnes
# Copyright (c) 2013 horsik
# Copyright (c) 2013 Tao Sauvage
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from libqtile import bar, layout, widget, extension
from libqtile.config import Click, Drag, Group, Key, Match, Screen
from libqtile.lazy import lazy
from libqtile.utils import guess_terminal
from spotify import Spotify

mod = "mod4"
terminal = guess_terminal()

keys = [
    # A list of available commands that can be bound to keys can be found
    # at https://docs.qtile.org/en/latest/manual/config/lazy.html
    # Switch between windows
    Key([mod], "h", lazy.layout.left(), desc="Move focus to left"),
    Key([mod], "l", lazy.layout.right(), desc="Move focus to right"),
    Key([mod], "j", lazy.layout.down(), desc="Move focus down"),
    Key([mod], "k", lazy.layout.up(), desc="Move focus up"),
    Key([mod], "space", lazy.layout.next(), desc="Move window focus to other window"),
    Key([mod], "comma", lazy.to_screen(0), desc="Move screen focus to screen 0"),
    Key([mod], "period", lazy.to_screen(1), desc="Move screen focus to screen 1"),
    # Move windows between left/right columns or move up/down in current stack.
    # Moving out of range in Columns layout will create new column.
    Key([mod, "shift"], "h", lazy.layout.shuffle_left(), desc="Move window to the left"),
    Key([mod, "shift"], "l", lazy.layout.shuffle_right(), desc="Move window to the right"),
    Key([mod, "shift"], "j", lazy.layout.shuffle_down(), desc="Move window down"),
    Key([mod, "shift"], "k", lazy.layout.shuffle_up(), desc="Move window up"),

    Key([mod, "shift"], "Left", lazy.layout.shuffle_left(), desc="Move window to the left"),
    Key([mod, "shift"], "Right", lazy.layout.shuffle_right(), desc="Move window to the right"),
    Key([mod, "shift"], "Down", lazy.layout.shuffle_down(), desc="Move window down"),
    Key([mod, "shift"], "Up", lazy.layout.shuffle_up(), desc="Move window up"),
    # Grow windows. If current window is on the edge of screen and direction
    # will be to screen edge - window would shrink.
    Key([mod, "control"], "h", lazy.layout.grow_left(), desc="Grow window to the left"),
    Key([mod, "control"], "l", lazy.layout.grow_right(), desc="Grow window to the right"),
    Key([mod, "control"], "j", lazy.layout.grow_down(), desc="Grow window down"),
    Key([mod, "control"], "k", lazy.layout.grow_up(), desc="Grow window up"),
    Key([mod, "control"], "Left", lazy.layout.grow_left(), desc="Grow window to the left"),
    Key([mod, "control"], "Right", lazy.layout.grow_right(), desc="Grow window to the right"),
    Key([mod, "control"], "Down", lazy.layout.grow_down(), desc="Grow window down"),
    Key([mod, "control"], "Up", lazy.layout.grow_up(), desc="Grow window up"),
    Key([mod], "n", lazy.layout.normalize(), desc="Reset all window sizes"),
    # Toggle between split and unsplit sides of stack.
    # Split = all windows displayed
    # Unsplit = 1 window displayed, like Max layout, but still with
    # multiple stack panes
    Key(
        [mod, "shift"],
        "Return",
        lazy.layout.toggle_split(),
        desc="Toggle between split and unsplit sides of stack",
    ),
    # Spawn terminal
    Key([mod], "Return", lazy.spawn("st"), desc="Launch terminal"),
	# Spawn file explorer
	Key([mod], "e", lazy.spawn("thunar"), desc="Launch file explorer"),
	# Spawn chrome
	Key([mod], "c", lazy.spawn("google-chrome"), desc="Launch chrome"),
	# Screenshot
	Key([mod, "shift"], "z", lazy.spawn("flameshot gui"), desc="Take a screenshot"),
    # Toggle between different layouts as defined below
    Key([mod], "Tab", lazy.next_layout(), desc="Toggle between layouts"),
    Key([mod, "control"], "w", lazy.window.kill(), desc="Kill focused window"),
    Key([mod, "control"], "r", lazy.reload_config(), desc="Reload the config"),
    Key([mod, "control"], "m", lazy.shutdown(), desc="Shutdown Qtile"),
#    Key([mod], "r", lazy.spawncmd(), desc="Spawn a command using a prompt widget"),
	# For BSP layout
	Key([mod], "j", lazy.layout.down()),
	Key([mod], "k", lazy.layout.up()),
	Key([mod], "h", lazy.layout.left()),
	Key([mod], "l", lazy.layout.right()),
	# For multimedia
	Key([mod], "Up", lazy.spawn("amixer set Master 5%+"), desc="Raise volume by 5%"),
	Key([mod], "Down", lazy.spawn("amixer set Master 5%-"), desc="Decrease voulume by 5%"),
	Key([mod], "Right", lazy.spawn("playerctl -p spotify next"), desc="Play next song"),
	Key([mod], "Left", lazy.spawn("playerctl -p spotify previous"), desc="Play previous song"),
	Key([mod], "p", lazy.spawn("playerctl -p spotify play-pause"), desc="Toggle play-pause"),
	# Toggle floating window23
	Key([mod, "control"], "f", lazy.window.toggle_floating()),
    Key([mod], "F1", lazy.spawn("flameshot gui")),

    Key([mod], "r", lazy.run_extension(extension.DmenuRun(
        dmenu_command="dmenu_run",
        dmenu_prompt="> ",
		font="Roboto Mono",
		fontsize = 12,
		background = "#221155",
    ))),
    Key(["mod1"], "Tab", lazy.run_extension(extension.WindowList(
        dmenu_ignorecase = True,
        background = "#221155",
        font = "Roboto Mono",
        fontsize = 10,
    ))),
	Key([mod, "control"], "period", lazy.spawn("smile"), desc="Lauch smile emoji picker"),
]

groups = [Group(i) for i in "123456789sd"]

for i in groups:
    keys.extend(
        [
            # mod1 + letter of group = switch to group
            Key(
                [mod],
                i.name,
                lazy.group[i.name].toscreen(),
                desc="Switch to group {}".format(i.name),
            ),
            # mod1 + shift + letter of group = switch to & move focused window to group
            Key(
                [mod, "shift"],
                i.name,
                lazy.window.togroup(i.name, switch_group=True),
                desc="Switch to & move focused window to group {}".format(i.name),
            ),
            # Or, use below if you prefer not to switch to that group.
            # # mod1 + shift + letter of group = move focused window to group
            # Key([mod, "shift"], i.name, lazy.window.togroup(i.name),
            #     desc="move focused window to group {}".format(i.name)),
        ]
    )




layouts = [
#	layout.Bsp(margin=6,  border_width=4, border_focus="aa88ff", border_normal="440066"),
    layout.Columns(border_focus_stack=["#bb66ee", "#aa55dd"], border_width=4, margin=6, border_focus="9977ff", border_normal="220044"),
#    layout.Floating(border_focus="ffffff", border_width=4),
    
    layout.Max(),
    
    # Try more layouts by unleashing below layouts.
    # layout.Stack(num_stacks=2),
    # layout.Bsp(),
    # layout.Matrix(),
    # layout.MonadTall(),
    # layout.MonadWide(),
    # layout.RatioTile(border_width=4, border_focus="9977ff", border_normal="220044"),
    # layout.Tile(),
    # layout.TreeTab(),
    # layout.VerticalTile(),
    # layout.Zoomy()
]

widget_defaults = dict(
    font="sans",
    fontsize=12,
    padding=3,
)
extension_defaults = widget_defaults.copy()

screens = [
    Screen(
        top=bar.Bar(
            [
            	widget.Notify(default_timeout=10, parse_text=lambda text: text.replace('\n', '\\'), foreground_urgent="CC2255"),
                widget.GroupBox(
					active="eeddff",
					inactive="8855bb",
					borderwidth=1,
					this_current_screen_border="ffffff",
					other_current_screen_border="00aa00",
					disable_drag=True,
					this_screen_border="ffffff",
					other_screen_border="aaaaaa",
                ),
                widget.Prompt(),
                widget.WindowName(max_chars=100),
                # widget.Chord(
                #     chords_colors={
                #         "launch": ("#ff0000", "#ffffff"),
                #     },
                #     name_transform=lambda name: name.upper(),
                # ),

                Spotify(padding=4, max_chars=60, mouse_callbacks={'Button2': lazy.spawn("playerctl -p spotify next")}, foreground= "55ff55"),

                widget.TextBox("|"),

				widget.Memory(fmt = "{}", foreground="ffaaff"),

                widget.TextBox("|"),
                widget.Battery(fmt = "{}", foreground="88ee88"),

                widget.TextBox("|"),
         		widget.Backlight(fmt = "B: {}", backlight_name="intel_backlight", step=2, foreground="ffddaa"),

                widget.TextBox("|"),
				widget.Volume(fmt = "V: {}", volumeapp="pavucontrol", foreground="ffaabb", mouse_callbacks={'Button1': lazy.spawn("pavucontrol -t 3")}),

                widget.TextBox("|"),
                widget.CurrentLayout(),

                widget.Systray(),
                widget.Clock(format="%Y-%m-%d %a %I:%M %p"),
                widget.CurrentScreen(),
            ],
            24,
            background="554499",
            # opacity=0.8,
            #border_width=[2, 0, 2, 0],  # Draw top and bottom borders
            #border_color=["ff00ff", "000000", "ff00ff", "000000"]  # Borders are magenta
        ),
        wallpaper="/home/rozan/Pictures/wallpaper/54995745_p0_r.jpg",
        #wallpaper="/home/rozan/Pictures/wallpaper/stretched-1920-1080-715850.png",
		#wallpaper="/home/rozan/Pictures/wallpaper/wallpapersden.com_cool-anime-starry-night-illustration_1920x1080.jpg",
		#wallpaper="/home/rozan/Pictures/wallpaper/anime-wallpaper-20071713391035.jpg",
#		bottom=bar.Bar(
#			[widget.WindowTabs(),
#			], 24
#		)
    ),
	Screen(
        top=bar.Bar([
                widget.GroupBox(
					active="eeddff",
					inactive="8855bb",
					borderwidth=1,
					this_current_screen_border="ffffff",
					other_current_screen_border="00aa00",
					disable_drag=True,
					this_screen_border="ffffff",
					other_screen_border="aaaaaa",
                ),
            	widget.WindowName(),
				widget.Prompt(),
            	widget.Chord(
                    chords_colors={
                        "launch": ("#ff0000", "#ffffff"),
                    },
                    name_transform=lambda name: name.upper(),
                ),
#                widget.TextBox("qwdqw"),
#                widget.Cmus(background="#ff0000", fmt="adasd{}asds"),
#				widget.TextBox("a"),
#				widget.Mpd2(),
                widget.CurrentLayout(),
        		widget.CurrentScreen(),
            ],
            24,
#            background="552277",
        ),
#                wallpaper="/home/rozan/Pictures/wallpaper/stretched-1920-1080-715850.png",

    )
]


# Drag floating layouts.
mouse = [
   Drag([mod], "Button1", lazy.window.set_position_floating(), start=lazy.window.get_position()),
   Drag([mod], "Button3", lazy.window.set_size_floating(), start=lazy.window.get_size()),
   Click([mod], "Button2", lazy.window.bring_to_front()),
    Click([mod, "control"], "Button2", lazy.window.toggle_floating()),

]

dgroups_key_binder = None
dgroups_app_rules = []  # type: list
follow_mouse_focus = True
bring_front_click = False
cursor_warp = False
floating_layout = layout.Floating(
    float_rules=[
        # Run the utility of `xprop` to see the wm class and name of an X client.
        *layout.Floating.default_float_rules,
        Match(wm_class="confirmreset"),  # gitk
        Match(wm_class="makebranch"),  # gitk
        Match(wm_class="maketag"),  # gitk
        Match(wm_class="ssh-askpass"),  # ssh-askpass
        Match(title="branchdialog"),  # gitk
        Match(title="pinentry"),  # GPG key password entry
        Match(wm_class="pavucontrol"),
        Match(wm_class="blueman-manager"),
        Match(wm_class="smile"),
    ]
)
auto_fullscreen = True
focus_on_window_activation = "smart"
reconfigure_screens = True

# If things like steam games want to auto-minimize themselves when losing
# focus, should we respect this or not?
auto_minimize = True

# When using the Wayland backend, this can be used to configure input devices.
wl_input_rules = None

# XXX: Gasp! We're lying here. In fact, nobody really uses or cares about this
# string besides java UI toolkits; you can see several discussions on the
# mailing lists, GitHub issues, and other WM documentation that suggest setting
# this string if your java app doesn't work correctly. We may as well just lie
# and say that we're a working one by default.
#
# We choose LG3D to maximize irony: it is a 3D non-reparenting WM written in
# java that happens to be on java's whitelist.
wmname = "LG3D"


# Configure autostart
import subprocess
from libqtile import hook

@hook.subscribe.startup_once
def autostart():
    processes = [
    	['picom'],
    	['flameshot'],
#    	['xrandr', '--output', 'eDP1', '--primary', '--mode', '1920x1080', '--pos', '1440x1040', '--output', 'HDMI1', '--mode', '1440x900', '--pos', '0x0'],
#    	['xrandr', '--output', 'eDP1', '--primary', '--mode', '1920x1080', '--pos', '1440x0', '--output', 'HDMI1', '--mode', '1440x900', '--pos', '0x0'],
#		['/home/rozan/.screenlayout/home.sh'],
    	['blueman-applet'],
    	['ulauncher --hide-window']
    ]
    for p in processes:
    	subprocess.Popen(p)


# Configurere wayland
from libqtile import qtile

if qtile.core.name == "x11":
	term= "urxvt"
elif qtile.core.name == "wayland":
	term = "foot"
